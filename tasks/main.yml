---
- name: Requirements check | Check if Clickhouse is installed
  shell: dpkg-query -f '${Package} ' -W |grep -q "{{ chr_package| join(" ")}}"
  register: chr_rt_isinstalled
  ignore_errors: yes
  when: ansible_pkg_mgr == 'apt'
  tags: [precheck,install]

- name: Debug installed
  debug: var=chr_rt_isinstalled.rc

- name: Install by APT | Apt-key add yandex repo key
  apt_key:
    keyserver: keyserver.ubuntu.com
    id: E0C56BD4
  become: true
  tags: [install]

- name: Adding ClickHouse repo
  apt_repository:
    repo: "{{ chr_repo }}"
    state: present
  become: true
  tags: [install]

- name: Installing...
  apt:
    name: "{{ item }}"
    state: latest
  with_items: "{{ chr_package }}"
  become: true
  tags: [install]

- name: Check clickhouse config,data and logs
  file:
    dest: "{{ item }}"
    owner: clickhouse
    group: clickhouse
    state: directory
  with_items:
    - "{{ chr_path_logdir }}"
    - "{{ chr_path_configdir }}"
    - "{{ chr_path_tmp }}"
    - "{{ chr_path_data }}"
  notify: restart-ch
  become: true

- name: Config | Generate system config
  template:
   src: config.j2
   dest: "{{ chr_path_configdir }}/config.xml"
  notify: restart-ch
  become: true

- name: Config | Generate users config
  template:
   src: users.j2
   dest: "{{ chr_path_configdir }}/users.xml"
  notify: restart-ch
  become: true

- meta: flush_handlers

- name: Config | Delete database config
  command: "clickhouse-client -h localhost -q 'DROP DATABASE IF EXISTS `{{ item.name }}`'"
  with_items: "{{ chr_dbs }}"
  when: item.state is defined and item.state == 'absent'
  tags: [config_db]

- name: Config | Create database config
  command: "clickhouse-client -h localhost -q 'CREATE DATABASE IF NOT EXISTS `{{ item.name }}`'"
  with_items: "{{ chr_dbs }}"
  when: item.state is undefined or item.state == 'present'
  tags: [config_db]


